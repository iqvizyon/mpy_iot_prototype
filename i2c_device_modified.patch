--- i2c_device.py
+++ i2c_device_modified.py
@@ -50,19 +50,15 @@
     """
     def __init__(self, i2c, device_address):
         # Verify that a deivce with that address exists.
-        while not i2c.try_lock():
-            pass
         try:
             i2c.writeto(device_address, b'')
         except OSError:
             raise ValueError("No I2C device at address: %x" % device_address)
-        finally:
-            i2c.unlock()
 
         self.i2c = i2c
         self.device_address = device_address
 
-    def read_into(self, buf, **kwargs):
+    def read_into(self, buf, start, end):
         """
         Read into ``buf`` from the device. The number of bytes read will be the
         length of ``buf``.
@@ -75,9 +71,13 @@
         :param int start: Index to start writing at
         :param int end: Index to write up to but not include
         """
-        self.i2c.readfrom_into(self.device_address, buf, **kwargs)
+        b = bytearray(end-start)
+        self.i2c.readfrom_into(self.device_address, b)
 
-    def write(self, buf, **kwargs):
+        for i in range(end-start):
+            buf[start+i] = b[i]
+
+    def write(self, buf, start=None, end=None, stop=None):
         """
         Write the bytes from ``buffer`` to the device. Transmits a stop bit if
         ``stop`` is set.
@@ -91,14 +91,19 @@
         :param int end: Index to read up to but not include
         :param bool stop: If true, output an I2C stop condition after the buffer is written
         """
-        self.i2c.writeto(self.device_address, buf, **kwargs)
+        if start is None:
+            start = 0
+        if end is None:
+            end = len(buf)
+
+        if stop is None:
+            self.i2c.writeto(self.device_address, buf[start:end], stop)
+        else:
+            self.i2c.writeto(self.device_address, buf[start:end])
 
     def __enter__(self):
-        while not self.i2c.try_lock():
-            pass
         return self
 
     def __exit__(self, *exc):
-        self.i2c.unlock()
         return False
 
